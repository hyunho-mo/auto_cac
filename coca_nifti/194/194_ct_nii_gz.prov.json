{"prefix": {"fastr": "http://localhost/fastr/", "tool": "http://localhost/tool/", "node": "http://localhost/node/", "job": "http://localhost/job/", "data": "http://localhost/data/", "worker": "http://localhost/worker/", "network": "http://localhost/network/", "fastrinfo": "http://localhost/fastrinfo/"}, "agent": {"fastr:3.2.3": {}, "network:EPIfat_Pipeline_DFT/0.0": {}, "node:convert_from_dicom": {}, "tool:itktools/PxCastConvertDicom:0.3.2/0.1": {"fastrinfo:tool_dump": "{\"id\": \"PxCastConvertDicom\", \"name\": \"ITKTools dicom folder to image conversion tool\", \"version\": \"0.1\", \"description\": \"A wrapper around ITK Tools, as set of simple command line tools for image analysis.\", \"authors\": [{\"name\": \"Hakim Achterberg\", \"email\": \"h.achterberg@erasmusmc.nl\", \"url\": \"http://www.bigr.nl/people/HakimAchterberg\"}], \"class\": \"Node\", \"command\": {\"version\": \"0.3.2\", \"url\": \"https://github.com/ITKTools/ITKTools\", \"targets\": [{\"os\": \"windows\", \"arch\": \"*\", \"paths\": \"vfs://apps/itktools/0.3.2/install/bin\", \"bin\": \"pxcastconvert.exe\"}, {\"os\": \"linux\", \"arch\": \"*\", \"modules\": \"itktools/0.3.2\", \"paths\": \"vfs://apps/itktools/0.3.2/install/bin\", \"bin\": \"pxcastconvert\"}, {\"os\": \"darwin\", \"arch\": \"*\", \"modules\": \"itktools/0.3.2\", \"paths\": \"vfs://apps/itktools/0.3.2/install/bin\", \"bin\": \"pxcastconvert\"}], \"description\": \"\\n      ITKTools v0.3.2\\n      Description:\\n      This program converts between many image formats.\\n      This is done by reading in an image, possibly casting of the image,\\n      and subsequently writing the image to the user-specified format.\\n\\n      Definitions:\\n      - converting: changing the extension of the image, e.g. bmp, mhd, etc.\\n      - casting: changing the component type of a voxel, e.g. short, float,\\n      unsigned long, etc.\\n\\n      Notes:\\n      - Casting of scalar images is done by the itk::ShiftScaleImageFilter,\\n      where values are mapped to itself, leaving the intensity range\\n      the same. NB: When casting to a component type with smaller dynamic\\n      range, information might get lost.\\n      - Casting of multi-component images, such as vector or RGB images, is\\n      done using the itk::VectorCastImageFilter.\\n      - Input images can be in all file formats ITK supports and for which\\n      the itk::ImageFileReader works, and additionally 3D dicom series.\\n      It is also possible to extract a specific DICOM series from a directory\\n      by supplying the seriesUID.\\n      - Output images can be in all file formats ITK supports and for which\\n      the itk::ImageFileWriter works. Dicom output is not supported yet.\\n\\n\\n      Usage:\\n      pxcastconvert\\n      -in inputfilename\\n      -out outputfilename\\n      [-opct] outputPixelComponentType, default equal to input\\n      [-z] compression flag; if provided, the output image is compressed\\n      OR pxcastconvert\\n      -in dicomDirectory\\n      -out outputfilename\\n      [-opct] outputPixelComponentType, default equal to input\\n      [-s] seriesUID, default the first UID found\\n      [-r] add restrictions to generate a unique seriesUID\\n      e.g. \\\"0020|0012\\\" to add a check for acquisition number.\\n      [-z] compression flag; if provided, the output image is compressed\\n\\n      OutputPixelComponentType should be one of {[unsigned_]char, [unsigned_]short,\\n      [unsigned_]int, [unsigned_]long, float, double}.\\n      NB: Not every image format supports all OutputPixelComponentTypes.\\n      NB2: Not every image format supports the compression flag \\\"-z\\\".\\n    \", \"license\": null, \"authors\": [{\"name\": \"Hakim Achterberg\", \"email\": \"h.achterberg@erasmusmc.nl\", \"url\": \"http://www.bigr.nl/people/HakimAchterberg\"}, {\"name\": \"Stefan Klein\", \"email\": \"s.klein@erasmusmc.nl\", \"url\": \"http://www.bigr.nl/people/StefanKlein\"}, {\"name\": \"Marius Staring\", \"email\": \"m.staring@lumc.nl\", \"url\": \"http://elastix.isi.uu.nl/marius/index.html\"}]}, \"interface\": {\"class\": \"FastrInterface\", \"inputs\": [{\"id\": \"dicom_image\", \"name\": \"Input Image\", \"description\": \"\", \"datatype\": \"DicomImageFile\", \"prefix\": \"-in\", \"repeat_prefix\": false, \"cardinality\": 1, \"nospace\": false, \"format\": null, \"required\": true, \"default\": null, \"order\": 0, \"hidden\": false, \"join\": null, \"environ\": null}, {\"id\": \"component_type\", \"name\": \"Output Component Type\", \"description\": \"\", \"prefix\": \"-opct\", \"repeat_prefix\": false, \"cardinality\": 1, \"nospace\": false, \"format\": null, \"required\": false, \"default\": null, \"order\": 1, \"hidden\": false, \"join\": null, \"environ\": null, \"enum\": [\"int\", \"long\", \"double\", \"char\", \"float\", \"unsigned_char\", \"unsigned_long\", \"unsigned_int\", \"short\", \"unsigned_short\"]}, {\"id\": \"compression_flag\", \"name\": \"Compression Flag\", \"description\": \"\", \"datatype\": \"Boolean\", \"prefix\": \"-z\", \"repeat_prefix\": false, \"cardinality\": 1, \"nospace\": false, \"format\": null, \"required\": false, \"default\": null, \"order\": 2, \"hidden\": false, \"join\": null, \"environ\": null}, {\"id\": \"series_uid\", \"name\": \"Series UID\", \"description\": \"\", \"datatype\": \"String\", \"prefix\": \"-s\", \"repeat_prefix\": false, \"cardinality\": 1, \"nospace\": false, \"format\": null, \"required\": false, \"default\": null, \"order\": 3, \"hidden\": false, \"join\": null, \"environ\": null}, {\"id\": \"restrictions\", \"name\": \"restrictions\", \"description\": \"\", \"datatype\": \"String\", \"prefix\": \"-r\", \"repeat_prefix\": false, \"cardinality\": \"1-*\", \"nospace\": false, \"format\": null, \"required\": false, \"default\": null, \"order\": 4, \"hidden\": false, \"join\": null, \"environ\": null}], \"outputs\": [{\"id\": \"image\", \"name\": \"output image\", \"description\": \"\", \"datatype\": \"ITKImageFile\", \"prefix\": \"-out\", \"repeat_prefix\": false, \"cardinality\": 1, \"nospace\": false, \"format\": null, \"required\": true, \"default\": null, \"order\": 5, \"hidden\": false, \"join\": null, \"environ\": null, \"automatic\": false, \"action\": null, \"location\": null, \"separator\": null, \"method\": null, \"negate\": false}]}, \"requirements\": null, \"tests\": [], \"help\": \"None\", \"cite\": \"None\", \"references\": [], \"tags\": [], \"url\": null}"}}, "activity": {"job:EPIfat_Pipeline_DFT___convert_from_dicom___194": {}}, "actedOnBehalfOf": {"_:id1": {"prov:delegate": "network:EPIfat_Pipeline_DFT/0.0", "prov:responsible": "fastr:3.2.3"}, "_:id3": {"prov:delegate": "node:convert_from_dicom", "prov:responsible": "network:EPIfat_Pipeline_DFT/0.0"}, "_:id5": {"prov:delegate": "node:convert_from_dicom", "prov:responsible": "tool:itktools/PxCastConvertDicom:0.3.2/0.1"}}, "entity": {"data:fastr://data/constant//scratch/hmo/COCA/194/Pro_Gated_Calcium_Score_(CS)_3.0_Qr36_2_BestDiast_57_%": {}}, "wasAssociatedWith": {"_:id2": {"prov:activity": "job:EPIfat_Pipeline_DFT___convert_from_dicom___194", "prov:agent": "node:convert_from_dicom"}}, "used": {"_:id4": {"prov:activity": "job:EPIfat_Pipeline_DFT___convert_from_dicom___194", "prov:entity": "data:fastr://data/constant//scratch/hmo/COCA/194/Pro_Gated_Calcium_Score_(CS)_3.0_Qr36_2_BestDiast_57_%"}}}